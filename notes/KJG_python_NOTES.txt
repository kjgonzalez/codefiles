Simple Notes on Python

to add: 
load / read from csv
save to csv
do matrix operations, no libraries
all kinds of loops
if statements
custom functions
classes / objects? 


= = = = Loops = = = =
# simple for loop
for i in range(1,10):
	print 'hello, ',i

# simple while loop
while(i>1):
	print "hello, ",i
	if(i<0):
		break
	i=i-1

= = = = If-Else = = = =
i = 2
if(i < 1):
	print "lower than 1"
elif(i == 1):
	print "equal to 1"
elif(i != 1):
	print "just not one"
else:
	print "this is an impossible condition to reach"

= = = = Custom Functions = = = =
def pyt(a,b):
	# a=float(a)
	# b=float(b)
	# not necessary here, because of "**0.5"
	return (a**2+b**2)**0.5
print pyt(3,4)
#KJGNOTE taking the power of something does not make it a float, 
#	 you gotta do that yourself
print 2.0**2/3

= = = = List Current Active Variables = = = =
dir()

#alternatively, type in: 
dir()[4:]
#which just means you skip the automatically generated info

= = = = Explicit Line Joining = = = =
aka: continue code on more than one line

'this is \
a valid \
line of code \
and is seen by \
the python compiler \
as one line.'

= = = = Simple stuff on lists = = = =
i0=[1,2,3]
i=[1,2,'a',i0,3,4]
print i #This prints out the entire list

= = = = load CSV = = = =
many, many methods for this. 

1st approach, without module: use native 'file' class
class: file
typical methods: 
	read
	readline
	write
f = file('poem.txt', 'w') # open for 'w'riting
f.write(poem) # write text to file
f.close() # close the file
f = file('poem.txt') # if no mode is specified, \
	'r'ead mode is assumed by default
while True:
	line = f.readline()
	if len(line) == 0: # Zero length indicates EOF
		break
	print line, # Notice comma to avoid automatic newline added by Python
f.close() # close the file

2nd approach, with module: use 'csv' module


= = = = Quick Review of Types = = = =
print type(1)		# int
print type(1.0)		# float
print type('1')		# string
print type("12")	# string
print type(True)	# bool
print type(1231231412) # int
print type([1,2,3])	# list


= = = = Help with Dictionaries = = = =
dic={}
dic['name'] = [1,2,3]
dic['name2'] = 3
dic['name3'] = 'something'
for city in near.keys():
	print city,':',near[city]

