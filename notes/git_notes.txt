KJG Git Notes

Sources: 
1: https://unix.stackexchange.com/questions/214879/git-submodule-shows-new-commits-submodule-status-says-nothing-to-commit/215258
cause of issue: x
    * git pull in main repo
    * git status
    * see "modified: submodules/SomeName (new commits)
2: issue: get this message: "remote: This repository moved. Please use the new location"
3: https://git-scm.com/book/en/v2/Git-Tools-Submodules


DEALING WITH SUBMODULES IN GIT =============================
Submodules are generally a pain and should be avoided unless code is stable 
    and modular. Useful tips below (Src3)

notes: 
* if simply pulling data from submodule, will still create a new commit 
    whenever the submodule is updated.
* commiting a change in submodule from mainproject only changes the status in 
    the main project, but not in submodule's repo.
* if you commit submodule changes from mainproject while in detached head state,
    you could lose those changes next time git submodule update is run.
* to setup a submodule for editing, must checkout a branch then tell git what to
    do when use "git submodule update --remote"
* when call the * --remote command, should either use merge or rebase flag so 
    git knows what to do, instead of put submodule on detached head again.
* IF YOU DO NOT USE MERGE OR REBASE FLAG, YOU WILL UPDATE INTO A DETACHED HEAD 
    STATE! to fix this: 
    1. check out the original branch again (in submodule: git checkout 
        MainBranch)
    2. use correct command (in parent: git submodule update --remote --merge)
* if you want to push changes on a submodule repo from a parent repo, you need 
    to treat it like its own repo: checkout a new branch, make edits, commit, 
    push to remote, then make a pull request if you aren't the owner. finally, 
    when finished, commit the changed submodule in the parent like a normal 
    commit.

rules of thumb:
* don't change a submodule from a parent repo, change it from the original and 
    merge
* use merge flag, leads to less issues than rebase
* submodules should only be used if there is stable, modular code that MUST be 
    used in two different projects that isn't already on a wheel.

full steps w/o combining skipping:
    git clone <MAIN_URL>
    git submodule init
    git submodule update
HOWEVER: much easier to just combine things as noted below in short versions

INITIALIZING A NEW BRANCH LOCALLY ==========================
  git branch NewBranch
  git checkout NewBranch
  (some changes get committed here)
  git push --set-upstream origin NewBranch

RENAMING / DELETING A LOCAL/REMOTE BRANCH ==================
git branch -m OldName NewName  # rename local
git push <remote> --delete OldName # delete old branch, where <remote> can be "origin"
git push <remote> NewName      # Push the new branch to remote
git push <remote> -u NewName   # re-start remote branch tracking



MISCELLANEOUS NOTES ABOUT BRANCHES =========================
* you can create a new branch from any other branch
* you can have a local branch without a remote branch, and vice-versa
* can also rename a branch locally & remotely (see below)


DEAL WITH BRANCH / MERGE CONFLICTS =========================
0. (have created local and remote changes, leading to a 
    conflict when pulling new commits in)
1. manually fix issues between the two, save files*
    !!! DO NOT, ** DO NOT ** MAKE A COMMIT !!!
2. git add <affected file(s)>
3. git rebase --continue
   (issue should be resolved)

CHECKOUT A REMOTE BRANCH ===================================
first time:	
    git checkout --track origin/BranchName
any other time:
    git checkout BranchName #omit remotes/origin

KEEP A LOCAL BRANCH OF A REPO UPDATED WITH REMOTE MASTER ===
KJG200316: note that this is not recommended
1. git clone repo
2. git branch NewBranchName of desired "master" version
3. commit local changes (especially if you don't plan to keep this forever)
4. git fetch
5. git rebase origin/MasterBranch

src: https://stackoverflow.com/questions/3876977/update-git-branches-from-master
(NOTE: use option 2)

MERGE A FEATURE BRANCH ONTO A MASTER BRANCH ================
# on master branch
git branch feature
# make some commits
git checkout master
git merge feature # adds extra commit explaining the merge

DEALING WITH AN IGNORED .GITIGNORE FILE ====================
if you have a .gitignore file that you created locally, but nothing that is
put it is being recognized, this may be a windows-specific encoding error.
    THUS, BE SURE TO SAVE YOUR .GITIGNORE FILE IN ANSI ENCODING! 


QUICK COMMANDS FOR HELPING TO GET STARTED ==================
initial config 1        git config --global user.email YourEmail
initial config 2        git config --global user.name YourName
initial config 3        git config --global pull.rebase true
initial config 4        git config --global push.default simple
initial config 5        git config --global diff.tool kdiff3 # specify desired tool here
initial config 6        git config --global difftool.kdiff3.path "C:\Program Files\KDiff3\kdiff3.exe" # note: not always needed
initial config 7        git config --global diff.submodule log
---
add a new submodule                 git submodule add <URL>
case1: clone project w/ submodules  git clone <MAIN_URL> --recurse-submodules
case2: get submodules after clone   git submodule update --init
update submodule from upstream      git submodule update --remote --merge
update submodule from coworker      git pull; git submodule update
update submodule from coworker ALT  git pull --recurse-submodules
---
rename branch, local    git branch -m NewBranch # must be on that branch
delete branch, local    git branch -d NewBranch
delete branch, remote   git push origin --delete NewBranch # note: "origin" can be other names
merge from master       git merge MasterBranch # must be in FeatureBranch
update submodules       git submodule update --remote --merge #(Src1) (do AFTER master update)
mention issue in commit git commit -m "#ISSUE_NUM: working on this thing" #(# is required)
close issue in commit   git commit -m "Fixes #ISSUE_NUM ..." #(# is required)
update github repo loc  git remote set-url origin [https://...git] #(Src2)
checkout new branch     git checkout BranchName #omit remotes/origin
checkout w/ tracking    git branch --set-upstream-to=origin/<branch> BranchName